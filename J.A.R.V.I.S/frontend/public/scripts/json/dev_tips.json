{
  "HTML": [
    "📌 Always declare the DOCTYPE at the top: <!DOCTYPE html>",
    "🧠 Use semantic tags like <article>, <section>, and <aside> for better accessibility.",
    "🔍 Add 'alt' text to <img> tags to improve SEO and screen reader support.",
    "🎯 Use <label> for <input> fields to make forms accessible.",
    "🧾 Place CSS in <head> and JS at the bottom or with defer for performance.",
    "📏 Use <meta viewport> for responsive design.",
    "🔗 Set 'rel=\"noopener noreferrer\"' on external links with target=\"_blank\".",
    "📦 Group content using <div> when no semantic element applies.",
    "🎨 Use <style> only for quick testing; prefer external CSS files.",
    "📜 Use <pre> for preformatted text and <code> for inline code.",
    "🔧 Escape special characters using &lt;, &gt;, &amp;, etc.",
    "🧩 Use <template> for reusable HTML blocks in JS.",
    "📋 Use <fieldset> and <legend> to group form inputs.",
    "🧠 Always close self-closing tags like <br> and <img> in XHTML.",
    "🧪 Use HTML validators to ensure well-formed code.",
    "🎯 Use ARIA roles where semantic HTML isn’t enough.",
    "🔢 Use ordered lists <ol> for step-based content.",
    "📍 Use <address> for contact information.",
    "📌 Use headings <h1> to <h6> in logical order.",
    "🔄 Use <noscript> to show fallback when JS is disabled.",
    "🗓 Use <time> tag to mark up dates and times.",
    "🧮 Use <meter> or <progress> for indicators.",
    "📎 Add titles to links and buttons for context.",
    "📢 Use <mark> to highlight keywords in search.",
    "📷 Use lazy loading: <img loading=\"lazy\">.",
    "🧼 Keep indentation consistent for readability.",
    "🔒 Use HTTPS URLs in all src/href values.",
    "🗂 Use <nav> to group site navigation links.",
    "📚 Use <summary> with <details> for togglable sections.",
    "🔍 Use <input type=\"search\"> for search bars.",
    "🎛 Use <output> to show results of calculations.",
    "🧾 Group radio buttons with same 'name'.",
    "📅 Use <input type=\"date\"> for date pickers.",
    "📜 Comment clearly using <!-- HTML comments -->.",
    "🧩 Use <iframe> sparingly and securely.",
    "🔍 Add favicon using <link rel=\"icon\">.",
    "📄 Use <main> to wrap the main content.",
    "🧠 Avoid deprecated tags like <font> or <center>.",
    "🧾 Use <bdo> for bi-directional text override.",
    "🔄 Keep IDs unique across the page.",
    "🎨 Avoid inline styles in HTML.",
    "🧰 Use <abbr> for abbreviations and tooltips.",
    "📂 Structure pages with logical nesting.",
    "🔁 Use <dl>, <dt>, and <dd> for definitions.",
    "📌 Use tabindex for keyboard navigation.",
    "📷 Use <figure> and <figcaption> for images with captions.",
    "🧪 Use <script type=\"module\"> for ES Modules.",
    "📁 Store assets in organized folders like /img, /css, /js.",
    "🧩 Use custom data-* attributes to store extra info."
  ],
  "CSS": [
    "🎯 Use classes instead of IDs for styling to maintain specificity.",
    "📐 Use rem or em units for scalable typography.",
    "🎨 Use :root to define CSS variables for global theming.",
    "🧼 Reset or normalize styles for cross-browser consistency.",
    "🧠 Understand the CSS box model: content, padding, border, margin.",
    "🔁 Use shorthand properties like margin: 0 auto; for brevity.",
    "📚 Comment your styles to explain complex rules.",
    "🔍 Use :hover, :focus, :active for better UI interactivity.",
    "🎛 Use media queries for responsive design.",
    "🧱 Avoid !important unless absolutely necessary.",
    "📦 Use display: flex; for easy layout control.",
    "🧭 Use display: grid; for complex layouts.",
    "🧪 Test on different devices and browsers.",
    "🌈 Use linear-gradient for backgrounds with flair.",
    "🔄 Use transform: scale/rotate/translate for animations.",
    "🧊 Use transition for smooth animations.",
    "🎞 Use animation for keyframe-driven effects.",
    "🔤 Set font-family with fallbacks, e.g., 'Roboto', sans-serif.",
    "🧩 Use z-index carefully and understand stacking context.",
    "🧾 Use text-overflow: ellipsis for clipped long text.",
    "📐 Use max-width for fluid images and layouts.",
    "🎯 Prefer padding over margin inside containers.",
    "📏 Use calc() for dynamic sizing.",
    "🖼 Use object-fit for responsive <img> sizing.",
    "🔐 Hide sensitive elements with display: none or visibility: hidden.",
    "🔢 Use nth-child and nth-of-type for complex selections.",
    "🧪 Use dev tools to test CSS live.",
    "🧠 Learn specificity rules: inline > ID > class > element.",
    "📦 Group related styles together for readability.",
    "📚 Use BEM naming convention for cleaner code.",
    "🧊 Prefer min-height over fixed height in fluid designs.",
    "🧼 Avoid deeply nested selectors to keep CSS maintainable.",
    "🔁 DRY: Don’t Repeat Yourself — reuse classes.",
    "🧠 Understand the cascade — the 'C' in CSS!",
    "🧾 Use white-space: nowrap for inline control.",
    "🧪 Test your layout with dummy content (Lorem ipsum).",
    "🔍 Use outline instead of border for focus indicators.",
    "🌐 Add lang-specific styles with [lang] selector.",
    "🧮 Use aspect-ratio for consistent element ratios.",
    "📦 Combine flex and grid for powerful layouts.",
    "🧪 Use :not() to exclude styles from elements.",
    "📄 Use content: attr(data-label); for custom display.",
    "🎭 Use clip-path for advanced shapes.",
    "🔁 Use visibility: hidden instead of display: none to reserve space.",
    "🖍 Use currentColor to inherit parent text color.",
    "📂 Organize stylesheets modularly (base, layout, components).",
    "🔧 Use @supports to write feature-based CSS.",
    "🧾 Avoid fixed units like px for scalable UIs.",
    "🎛 Use custom scrollbars with ::-webkit-scrollbar."
  ],
  "Tailwind": [
    "🚀 Use utility classes to rapidly prototype components.",
    "📦 Prefer responsive utilities like md:px-4 for breakpoints.",
    "🎯 Use `container` and `mx-auto` to center your layout.",
    "🧠 Use `@apply` in CSS files to extract repetitive classes.",
    "🌈 Use `bg-gradient-to-r` and friends for awesome gradients.",
    "🔍 Use `focus:outline-none` and `focus:ring` for better accessibility.",
    "🔠 Use `capitalize`, `uppercase`, and `lowercase` for text transformation.",
    "🧱 Use `grid`, `grid-cols-3`, `gap-4` for grid layouts.",
    "📐 Use `aspect-video` or `aspect-square` for responsive elements.",
    "💡 Use `hover:` and `group-hover:` for interactivity.",
    "📏 Use `min-h-screen` for full viewport layouts.",
    "🧼 Use `overflow-hidden`, `scroll`, `auto` for scroll behaviors.",
    "🎨 Use `text-opacity` and `bg-opacity` to fine-tune visibility.",
    "🔁 Use `space-x-4` or `space-y-2` for element spacing.",
    "📋 Use `truncate`, `whitespace-nowrap`, and `overflow-ellipsis` for long text.",
    "📎 Use `sticky top-0` for sticky headers.",
    "🛠 Use `z-10`, `z-50`, etc., to manage layer stacking.",
    "🧪 Combine flex and grid utilities for complex layouts.",
    "📚 Use official Tailwind plugins for forms, typography, aspect ratio, etc.",
    "📂 Keep class order consistent: layout → spacing → color → others.",
    "🎛 Use `ring`, `ring-offset`, `ring-opacity` for beautiful outlines.",
    "🧊 Use `transition`, `duration-300`, `ease-in-out` for animations.",
    "🌐 Use `divide-x` and `divide-y` for borders between elements.",
    "📌 Use `fixed`, `absolute`, `relative` for positioning.",
    "📦 Group multiple items using `group` and target with `group-hover`.",
    "🔧 Use custom config to add colors, spacing, and variants.",
    "🖍 Use `text-[color]` and `bg-[color]` for custom hex colors.",
    "📐 Use `w-1/2`, `w-full`, `w-auto` for width control.",
    "📏 Use `h-screen`, `h-96`, `h-auto` for height control.",
    "📜 Add `scroll-smooth` to enable smooth scrolling.",
    "🧭 Use `justify-between`, `justify-center`, and `items-center` with `flex`.",
    "🔤 Use `font-sans`, `font-serif`, `font-mono` for font families.",
    "🌈 Customize shadows with `shadow-md`, `shadow-lg`, etc.",
    "🎯 Use `focus-visible` for keyboard accessibility.",
    "🧾 Use `list-disc` and `list-inside` for list styling.",
    "📐 Use `rounded-xl`, `rounded-full` for border radius.",
    "🔠 Use `tracking-wide`, `leading-loose` for typography spacing.",
    "🖼 Use `object-cover`, `object-contain` for image fit.",
    "🧮 Use `col-span-2`, `row-span-3` for grid control.",
    "🔧 Customize spacing scale in `tailwind.config.js`.",
    "🛠 Use `dark:` mode to create dark theme versions.",
    "📦 Use `inset-0`, `top-4`, `right-2` for positioning.",
    "📁 Structure class-heavy HTML by line breaks for readability.",
    "📘 Use `prose` with typography plugin for styled content.",
    "🧑‍🎨 Use class composition via @apply for custom components.",
    "🔄 Use `rotate`, `scale`, and `translate` utilities for animation effects.",
    "🔗 Use `cursor-pointer`, `cursor-not-allowed` for UX cues.",
    "🧩 Keep your utilities minimal to avoid class bloat.",
    "🧠 Learn JIT mode for on-demand class generation."
  ],
  "JavaScript": [
    "🧠 Understand the difference between var, let, and const.",
    "🔁 Use `forEach`, `map`, `filter`, and `reduce` for cleaner loops.",
    "🧪 Always check for `undefined` or `null` before accessing properties.",
    "💡 Use template literals: `Hello, ${name}` instead of string + concat.",
    "⚡ Arrow functions don't bind `this` — great for callbacks.",
    "🧱 Use `===` instead of `==` to avoid type coercion bugs.",
    "📦 Modularize code using `export` and `import` for better structure.",
    "🛑 Always handle errors using `try...catch` or `.catch()` in promises.",
    "⏳ Use `async/await` to write cleaner asynchronous code.",
    "🧹 Use destructuring for cleaner and shorter code: `const { name } = user`.",
    "🔍 Use `Array.isArray()` to accurately detect arrays.",
    "🎯 Use `Array.from()` or spread `[...]` to convert array-like objects.",
    "🧊 Freeze objects with `Object.freeze()` to make them immutable.",
    "📌 Prefer `const` when the variable won’t be reassigned.",
    "💥 Use `??` (nullish coalescing) instead of `||` in some cases.",
    "🧪 Use optional chaining: `user?.profile?.name` to avoid errors.",
    "📚 Always keep utility functions in separate files.",
    "🧠 Closures remember the outer scope — even after the outer function has run!",
    "🛠 Use `setTimeout` and `setInterval` carefully to avoid memory leaks.",
    "📈 Use `console.table()` for printing structured data.",
    "🔍 Always sanitize user input to prevent XSS.",
    "🚦 Use `switch` instead of multiple `if`/`else if` for clarity.",
    "🧮 Use `Number.isNaN()` instead of `isNaN()` for accurate checks.",
    "📐 Use `Math.floor()`, `Math.ceil()`, `Math.round()` for rounding values.",
    "📦 Use IIFE (Immediately Invoked Function Expression) to create private scopes.",
    "🎭 Understand the difference between shallow vs deep copying.",
    "🧬 Use the spread operator to clone objects/arrays: `{ ...obj }`, `[...arr]`.",
    "📑 Use `.flat()` and `.flatMap()` to work with nested arrays.",
    "⚙️ Avoid nesting too many callbacks — use promises instead.",
    "🔍 Use `.includes()` instead of `indexOf()` for better readability.",
    "📌 Memoize expensive function calls to improve performance.",
    "🔒 Don’t expose sensitive data on the frontend.",
    "📊 Use `localStorage`, `sessionStorage` or `IndexedDB` for persistent data.",
    "📏 Learn `event.preventDefault()` and `stopPropagation()` for form control.",
    "🧱 Group related logic into modules or classes.",
    "🎨 Use `classList.add/remove/toggle` to manipulate classes dynamically.",
    "🛠 Learn DOM traversal: `parentNode`, `children`, `nextSibling`.",
    "🧼 Clean up intervals/timeouts when components unmount (in frameworks).",
    "📚 Use `Object.entries()`, `Object.keys()` and `Object.values()` for object iteration.",
    "🧩 Always write reusable code by generalizing logic.",
    "🚀 Lazy load scripts and assets to boost performance.",
    "📌 Avoid global variables — use closures or modules.",
    "🧪 Write test cases using Jest or Mocha for mission-critical logic.",
    "🔢 Don’t forget that `parseInt('08')` is tricky — always specify base!",
    "💡 Store useful patterns in snippets or utilities for reuse.",
    "🎯 Use `bind`, `call`, `apply` to control function context.",
    "🔁 Debounce or throttle user input in search fields.",
    "🌐 Use `fetch` or `axios` for API calls.",
    "🧾 Use `Object.hasOwn()` to check direct properties safely.",
    "🎭 Understand event bubbling and capturing phases."
  ],
  "NodeJS": [
    "🟢 Always initialize your project with `npm init -y`.",
    "📁 Use a `config.js` file to manage environment-specific settings.",
    "🔐 Store sensitive data in `.env` and access with `process.env`.",
    "🚀 Use `nodemon` during development for auto-restart.",
    "📦 Group all `require()` calls at the top of your files.",
    "🧱 Organize code using folders: routes, controllers, models, etc.",
    "🔄 Use `async/await` instead of callbacks for cleaner flow.",
    "🧪 Use `try/catch` or middleware to handle errors.",
    "🛠 Use built-in modules like `fs`, `path`, and `http` to save dependencies.",
    "📜 Log errors and events using `console.error()` or `winston`.",
    "🧪 Write unit tests using `mocha`, `chai`, or `jest`.",
    "📚 Use `express` or similar frameworks for faster backend setup.",
    "📡 Use `axios` or `node-fetch` for API calls.",
    "🔁 Modularize routes using Express routers.",
    "📌 Always return JSON responses from APIs.",
    "📂 Use `path.join()` for cross-platform path handling.",
    "🔐 Use Helmet to secure HTTP headers.",
    "📦 Use `cors` to enable cross-origin requests.",
    "💾 Stream large files instead of reading all into memory.",
    "🚦 Rate-limit requests with `express-rate-limit`.",
    "📎 Use middleware for common logic (auth, logging, etc.).",
    "⚠️ Validate all incoming data — never trust client input!",
    "🧠 Understand the event loop and non-blocking I/O.",
    "🕵️ Use `debug` module for clean logging during development.",
    "📄 Use `.gitignore` to skip node_modules and .env files.",
    "🔍 Use `morgan` for HTTP request logging.",
    "📦 Use `npm run dev` with nodemon for a smooth workflow.",
    "🧰 Catch uncaught exceptions with `process.on('uncaughtException')`.",
    "🧪 Use `process.argv` to build command-line tools.",
    "📂 Group reusable logic into helper or service files.",
    "🔄 Watch for memory leaks in long-running processes.",
    "🧩 Use template engines like EJS, Handlebars for server-side HTML.",
    "📌 Use `res.status().json()` to return proper API responses.",
    "⚙️ Use cluster module or PM2 for multi-core performance.",
    "🔧 Use `dotenv` to manage environment variables.",
    "📦 Always lock dependencies using `package-lock.json`.",
    "📡 Use `websockets` or `socket.io` for real-time features.",
    "🧵 Prefer async file system APIs like `fs.promises`.",
    "🔑 Use JWT for stateless authentication.",
    "🗃 Use a cache layer like Redis for heavy APIs.",
    "🧪 Validate APIs with tools like Postman or Insomnia.",
    "📦 Use semantic versioning (`^`, `~`) carefully.",
    "🧼 Avoid nesting too many callbacks — use promises instead.",
    "🧠 Understand middleware order in Express.js.",
    "🚀 Use service/repository layers for business logic.",
    "🗂 Follow MVC or clean architecture for scalable projects.",
    "📑 Use `res.locals` to pass values between middleware and routes.",
    "🧪 Check memory usage with `process.memoryUsage()` for optimization.",
    "🧬 Use ESLint to enforce clean code and consistency."
  ],
  "ExpressJS": [
    "🚀 Start your app with `const app = express();` — it all begins here!",
    "🔧 Use `express.json()` and `express.urlencoded()` for parsing incoming data.",
    "📁 Structure routes into separate files for cleanliness.",
    "📡 Use `app.use('/api', router)` to organize API routes.",
    "🧩 Add middleware functions for logging, validation, or auth.",
    "📦 Use `res.status().json()` to send structured API responses.",
    "🧪 Handle 404s with `app.use((req, res) => res.status(404).send(...))`.",
    "📜 Keep error-handling middleware at the bottom of all routes.",
    "🔐 Protect routes with middleware like `verifyToken` or role-based guards.",
    "🧱 Use `express.Router()` for modular route grouping.",
    "📄 Return only required fields in responses to avoid overexposure.",
    "🛠 Mount multiple middlewares using arrays: `app.use([mw1, mw2])`.",
    "🌐 Use `cors()` for handling cross-origin requests.",
    "📂 Set static folder using `app.use(express.static('public'))`.",
    "🗂 Serve HTML with `res.sendFile(__dirname + '/file.html')`.",
    "🔍 Log HTTP requests using `morgan`.",
    "📌 Handle async routes with `try/catch` and `next(err)` for errors.",
    "📤 Use `res.download()` or `res.attachment()` for file downloads.",
    "⚠️ Validate incoming data using `express-validator`.",
    "🧠 Understand middleware chaining: `req -> middleware -> route -> res`.",
    "🧰 Always return a response or call `next()` in middleware.",
    "📚 Define `GET`, `POST`, `PUT`, and `DELETE` clearly for REST APIs.",
    "🧬 Use consistent naming for routes and endpoints.",
    "🧪 Use Postman/Insomnia to test each route as you build it.",
    "🧾 Prefix routes by versioning: `/api/v1/...`.",
    "📈 Measure performance using middleware for `req.timeStart` and `req.timeEnd`.",
    "📎 Sanitize data to prevent injection attacks.",
    "🧩 Set custom headers with `res.set('Header-Name', value)`.",
    "🧠 Learn how `next()` passes control to the next function.",
    "🔐 Use middleware to attach user objects in requests after auth.",
    "📦 Use Helmet to secure headers easily.",
    "🔧 Organize routes: `/users`, `/auth`, `/products`, etc.",
    "📄 Use `res.locals` to pass data between middleware and views.",
    "🧱 Use status codes properly: 200, 201, 400, 401, 403, 404, 500.",
    "🧹 Clean up unused routes or middleware regularly.",
    "🎭 Catch and handle all errors in a global error handler.",
    "🔄 Test invalid input paths and check for route breaks.",
    "🗃 Always wrap async route handlers to catch errors.",
    "🧰 Create custom middleware like `logger`, `authChecker`, etc.",
    "🛑 Avoid sending sensitive data in response objects.",
    "📌 Setup fallback route for `/*` in SPAs.",
    "🎛 Separate business logic from routing logic.",
    "📦 Load middlewares conditionally for specific routes.",
    "🧪 Use `supertest` for integration testing with Express.",
    "📦 Use environment variables to toggle debug/info messages.",
    "⚙️ Use `app.disable('x-powered-by')` to hide tech stack info.",
    "🧬 Use cookie-parser and session for authentication if not using JWT.",
    "🛠 Restart server automatically during development using `nodemon`.",
    "📤 Compress large responses using `compression` middleware.",
    "🧾 Send status 204 (No Content) when applicable to save bandwidth."
  ],
  "MongoDB": [
    "🍃 MongoDB stores data in flexible JSON-like documents called BSON.",
    "📂 Collections in MongoDB are like tables in SQL.",
    "🆔 Every document has a unique `_id` field by default.",
    "🔍 Use `find()` to retrieve documents — it's like `SELECT` in SQL.",
    "📌 Use `findOne()` when you only need a single document.",
    "📎 Always index frequently queried fields to speed up performance.",
    "🧠 Understand CRUD: Create, Read, Update, Delete operations.",
    "🛠 Use `insertOne()` or `insertMany()` to add new documents.",
    "🔄 Use `updateOne()` or `updateMany()` to modify existing docs.",
    "❌ Use `deleteOne()` or `deleteMany()` to remove documents.",
    "⚙️ Use `upsert: true` to insert if no matching document exists.",
    "🧪 Use `mongoose` in Node.js for schema validation and structure.",
    "🔐 Never expose your DB connection string publicly.",
    "📦 Store secrets like DB credentials in `.env` files.",
    "🔁 Use `$set` to update only specific fields in a document.",
    "📊 Use MongoDB Compass GUI for visual management and queries.",
    "⚠️ Validate data before inserting to maintain consistency.",
    "🧮 Use aggregation pipelines for complex queries and analytics.",
    "🗂 Use `$project` to control the fields returned by queries.",
    "🔍 Use `$match` for filtering in aggregation pipelines.",
    "📌 Limit query results with `.limit()` and `.skip()` for pagination.",
    "🧹 Clean old or unused data with proper deletion queries.",
    "🧱 Design schemas based on how data is accessed — not normalized like SQL.",
    "🧬 Use embedded documents for 1-to-few relationships.",
    "🔗 Use referencing for large 1-to-many or many-to-many relations.",
    "🧠 Understand the difference between embedding and referencing.",
    "📑 Use `$in`, `$gt`, `$lt`, `$or`, and `$and` in query conditions.",
    "🧰 Use `lean()` in Mongoose to return plain JS objects instead of full Mongoose documents.",
    "🗃 Use `ObjectId` references properly — don’t store just strings.",
    "🧮 Use `$group` in aggregations to calculate totals, averages, etc.",
    "🔍 Use text indexes for full-text search with `$text` and `$search`.",
    "💥 Avoid using unindexed fields in large queries.",
    "📉 Monitor query performance with `.explain('executionStats')`.",
    "📄 Avoid storing large files — use GridFS for that.",
    "🧪 Use `mongoose.Schema.Types.ObjectId` for relationships in Mongoose.",
    "🧠 Keep nesting in documents shallow for performance.",
    "📌 Use `timestamps: true` in Mongoose to auto-create createdAt & updatedAt.",
    "📂 Use `populate()` to join data between referenced collections in Mongoose.",
    "🔍 Use regex queries carefully; they can slow down performance.",
    "🧪 Use `.select()` to return only required fields.",
    "📚 Use virtual fields in Mongoose for computed data.",
    "🧾 Validate schema data types to avoid unexpected values.",
    "🔄 Regularly back up your MongoDB database.",
    "📈 Use MongoDB Atlas for cloud DB hosting and monitoring.",
    "🧩 Use `mongoose.model()` to define and reuse data models.",
    "🛑 Use strict mode in Mongoose to avoid saving undeclared fields.",
    "📁 Organize Mongoose models into a `/models` folder in your Node.js app.",
    "🚦 Avoid unbounded `.find()` queries — always limit your data.",
    "📥 Keep an eye on your collection size and indexes as data grows."
  ],
  "MySQL": [
    "📘 Always end SQL statements with a semicolon (`;`).",
    "🆔 Use `AUTO_INCREMENT` for primary key fields.",
    "🔑 Define primary keys to uniquely identify records.",
    "🔎 Use `SELECT * FROM table` to view all records — but avoid `*` in production.",
    "📁 Use `CREATE DATABASE db_name;` to start a new database.",
    "🧱 Use `NOT NULL` to prevent storing empty values.",
    "🗃 Use `VARCHAR` for variable-length text, not `TEXT` unless needed.",
    "📌 Use `LIMIT` and `OFFSET` for pagination.",
    "🧪 Use `WHERE` clause to filter your results precisely.",
    "🔗 Define foreign keys to maintain data relationships.",
    "🧬 Normalize your tables to reduce redundancy.",
    "⚡ Index frequently searched fields with `CREATE INDEX`.",
    "📉 Use `EXPLAIN` to understand and optimize query performance.",
    "🧰 Use `JOIN` to combine data from multiple tables.",
    "🔄 Use `INNER JOIN`, `LEFT JOIN`, `RIGHT JOIN`, and `FULL JOIN` as needed.",
    "💾 Use `INSERT INTO table (cols...) VALUES (...)` to add data.",
    "🧠 Use `UPDATE table SET col=value WHERE condition;` to edit data.",
    "❌ Be cautious with `DELETE FROM table;` — always use `WHERE`!",
    "📚 Use `AS` to rename columns in output for readability.",
    "🧮 Use functions like `COUNT()`, `SUM()`, `AVG()` for reports.",
    "📦 Use `GROUP BY` to group rows and use aggregates.",
    "📌 Always match `GROUP BY` with selected fields properly.",
    "🛡 Sanitize input to avoid SQL injection — use prepared statements.",
    "🧾 Use aliases for tables in complex joins: `SELECT u.name FROM users u`.",
    "🎯 Use `DISTINCT` to remove duplicates from query results.",
    "⚠️ Always back up your database before major changes.",
    "🧠 Learn the difference between `CHAR` and `VARCHAR`.",
    "📍 Use `BETWEEN`, `IN`, `LIKE` for flexible conditions.",
    "🔐 Use `GRANT` and `REVOKE` to control user access.",
    "📜 Use `SHOW TABLES;`, `SHOW COLUMNS FROM table;` to explore structure.",
    "🗂 Use `UNION` to combine results from two queries.",
    "🧹 Use `TRUNCATE TABLE` to delete all records quickly (non-recoverable).",
    "📋 Use `DESCRIBE table_name;` to see column details.",
    "🧭 Order results with `ORDER BY col ASC|DESC`.",
    "🧪 Always test your queries on dummy data before real ones.",
    "💡 Use `DEFAULT` values to avoid NULL on insert.",
    "📂 Organize your queries into `.sql` files for versioning.",
    "🔧 Use `mysql -u root -p` to login to CLI as root.",
    "🔍 Use `SHOW INDEX FROM table;` to review indexes.",
    "🧱 Use ENUM when options are limited (e.g., gender, status).",
    "⚠️ Avoid over-indexing — it can slow down inserts/updates.",
    "📐 Structure tables with clear types and lengths: `VARCHAR(100)` etc.",
    "🛑 Be careful with cascading delete/update in foreign keys.",
    "📈 Monitor performance with tools like `MySQL Workbench` or `phpMyAdmin`.",
    "📚 Use comments `-- like this` or `/* block */` in your SQL scripts.",
    "💡 Use `IFNULL()` or `COALESCE()` to handle NULL values in queries.",
    "🔄 Use stored procedures for reusable, complex logic on the server side.",
    "🧮 Use subqueries wisely — too many can slow down performance.",
    "🚀 Optimize slow queries and avoid `SELECT *` in production code."
  ]
}
